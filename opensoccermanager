#!/usr/bin/env python3

#  OpenSoccerManager
#
#  Copyright 2015 Andrew Steele <andrew.steele@opensoccermanager.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.


from gi.repository import Gtk
import os
import subprocess

from uigtk import accounts
from uigtk import buildings
from uigtk import details
from uigtk import mainmenu
from uigtk import shortlist
from uigtk import squad
from uigtk import standings
from uigtk import tactics
from uigtk import tickets
from uigtk import venue

import business
import club
import constants
import data
import database
import date
import dialogs
import display
import fileio
import finances
import game
import information
import interface
import match
import menu
import music
import preferences
import printing
import structures
import team
import training
import user
import version
import view
import widgets


class Window(Gtk.Window):
    def __init__(self):
        preferences.preferences.readfile()

        iconpath = os.path.join("resources", "logo.svg")

        Gtk.Window.__init__(self)
        self.set_title(version.NAME)
        self.set_icon_from_file(iconpath)
        self.set_default_size(preferences.preferences.width,
                              preferences.preferences.height)

        if preferences.preferences.maximized:
            self.maximize()
        else:
            self.move(preferences.preferences.xposition,
                      preferences.preferences.yposition)

        self.connect("window-state-event", self.window_state_event)
        self.connect("delete-event", self.exit_game)

        game.accelgroup = Gtk.AccelGroup()
        self.add_accel_group(game.accelgroup)

    def window_state_event(self, widget, event):
        if self.is_maximized():
            self.move(preferences.preferences.xposition,
                      preferences.preferences.yposition)

    def screen_loader(self, index):
        screens = {1: self.screenSquad,
                   2: self.screenFixtures,
                   3: self.screenNews,
                   4: self.screenTactics,
                   5: self.screenStandings,
                   6: self.screenResults,
                   7: self.screenTeamTraining,
                   8: self.screenTrainingCamp,
                   9: self.screenIndividualTraining,
                   10: self.screenStadium,
                   11: self.screenFinances,
                   12: self.screenAccounts,
                   14: self.screenBuildings,
                   16: self.screenAdvertising,
                   17: self.screenMerchandise,
                   18: self.screenCatering,
                   19: self.screenTickets,
                   20: self.screenPlayers,
                   21: self.screenNegotiations,
                   22: self.screenShortlist,
                   23: self.screenStaff,
                   24: self.screenInjSus,
                   25: self.screenEvaluation,
                   29: self.screenStatistics,
                   30: self.screenCharts,
                   99: self.screenMatch,
                  }

        if game.active_screen:
            game.window.screenGame.remove(game.active_screen)

        game.active_screen = screens[index]
        game.active_screen_id = index
        game.window.screenGame.attach(game.active_screen, 0, 1, 1, 1)

        game.active_screen.set_border_width(5)
        game.active_screen.set_hexpand(True)
        game.active_screen.set_vexpand(True)

        game.active_screen.run()

    def exit_game(self, widget=None, event=None):
        def update_window_config():
            '''
            Save the window size and state to preferences when quitting.
            '''
            if game.window.is_maximized():
                preferences.preferences["INTERFACE"]["Maximized"] = "True"
            else:
                preferences.preferences["INTERFACE"]["Maximized"] = "False"

                width, height = game.window.get_size()
                preferences.preferences["INTERFACE"]["Width"] = str(width)
                preferences.preferences["INTERFACE"]["Height"] = str(height)

                xposition, yposition = game.window.get_position()
                preferences.preferences["INTERFACE"]["XPosition"] = str(xposition)
                preferences.preferences["INTERFACE"]["YPosition"] = str(yposition)

            preferences.preferences.writefile()

        if game.teamid is None:
            update_window_config()
            Gtk.main_quit()
        else:
            exit_dialog = interface.ExitDialog()
            state = exit_dialog.display()

            if not state:
                update_window_config()
                Gtk.main_quit()

            return state

    def run(self):
        self.screenMain = mainmenu.MainMenu()
        self.screenDetails = details.Details()
        self.screenGame = ScreenGame()

        self.screenSquad = squad.Squad()
        self.screenNews = information.News()
        self.screenEvaluation = information.Evaluation()
        self.screenCharts = information.Charts()
        self.screenStatistics = information.Statistics()
        self.screenFixtures = information.Fixtures()
        self.screenResults = information.Results()
        self.screenStandings = standings.Standings()
        self.screenNegotiations = view.Negotiations()
        self.screenShortlist = shortlist.Shortlist()
        self.screenInjSus = view.InjSus()
        self.screenTeamTraining = training.TeamTraining()
        self.screenIndividualTraining = training.IndividualTraining()
        self.screenTrainingCamp = training.TrainingCamp()
        self.screenTickets = tickets.Tickets()
        self.screenStaff = team.Staff()
        self.screenTactics = tactics.Tactics()
        self.screenAccounts = accounts.Accounts()
        self.screenMatch = match.Match()
        self.screenAdvertising = business.Advertising()
        self.screenMerchandise = business.Merchandise()
        self.screenCatering = business.Catering()
        self.screenBuildings = buildings.Buildings()
        self.screenPlayers = view.Players()
        self.screenFinances = finances.Finances()
        self.screenStadium = venue.Stadium()

        self.add(self.screenMain)

        fileio.check_config()

        self.show_all()

        if music.music.playing:
            music.music.play()


class ScreenGame(Gtk.Grid):
    def __init__(self):
        Gtk.Grid.__init__(self)

        game.menu = menu.Menu()
        self.attach(game.menu, 0, 0, 1, 1)

        game.menu.menuitemNew.connect("activate", self.new_game_clicked)
        game.menu.menuitemLoad.connect("activate", self.load_game_clicked)
        game.menu.menuitemSave.connect("activate", self.save_game_clicked)
        game.menu.menuitemDelete.connect("activate", self.delete_game_clicked)
        game.menu.menuitemPrint.connect("activate", self.print_clicked)
        game.menu.menuitemQuit.connect("activate", game.window.exit_game)

        game.menu.menuitemManager.connect("activate", self.name_change)
        game.menu.menuitemPreferences.connect("activate", self.preferences_dialog_clicked)

        game.menu.menuitemPlayers.connect("activate", lambda i: game.window.screen_loader(20))
        game.menu.menuitemComparison.connect("activate", self.player_comparison)
        game.menu.menuitemNews.connect("activate", lambda i: game.window.screen_loader(3))
        game.menu.menuitemFixtures.connect("activate", lambda i: game.window.screen_loader(2))
        game.menu.menuitemResults.connect("activate", lambda i: game.window.screen_loader(6))
        game.menu.menuitemStandings.connect("activate", lambda i: game.window.screen_loader(5))
        game.menu.menuitemCharts.connect("activate", lambda i: game.window.screen_loader(30))
        game.menu.menuitemEvaluation.connect("activate", lambda i: game.window.screen_loader(25))
        game.menu.menuitemOpposition.connect("activate", self.view_opposition)
        game.menu.menuitemNegotiations.connect("activate", lambda i: game.window.screen_loader(21))
        game.menu.menuitemShortlist.connect("activate", lambda i: game.window.screen_loader(22))
        game.menu.menuitemStatistics.connect("activate", lambda i: game.window.screen_loader(29))

        game.menu.menuitemStadium.connect("activate", lambda i: game.window.screen_loader(10))
        game.menu.menuitemBuildings.connect("activate", lambda i: game.window.screen_loader(14))
        game.menu.menuitemTickets.connect("activate", lambda i: game.window.screen_loader(19))
        game.menu.menuitemSponsorship.connect("activate", lambda i: dialogs.sponsorship())
        game.menu.menuitemAdvertising.connect("activate", lambda i: game.window.screen_loader(16))
        game.menu.menuitemMerchandise.connect("activate", lambda i: game.window.screen_loader(17))
        game.menu.menuitemCatering.connect("activate", lambda i: game.window.screen_loader(18))
        game.menu.menuitemFinances.connect("activate", lambda i: game.window.screen_loader(11))
        game.menu.menuitemAccounts.connect("activate", lambda i: game.window.screen_loader(12))

        game.menu.menuitemSquad.connect("activate", lambda i: game.window.screen_loader(1))
        game.menu.menuitemTactics.connect("activate", lambda i: game.window.screen_loader(4))
        game.menu.menuitemTeamTraining.connect("activate", lambda i: game.window.screen_loader(7))
        game.menu.menuitemIndTraining.connect("activate", lambda i: game.window.screen_loader(9))
        game.menu.menuitemTrainingCamp.connect("activate", lambda i: game.window.screen_loader(8))
        game.menu.menuitemInjSus.connect("activate", lambda i: game.window.screen_loader(24))
        game.menu.menuitemStaff.connect("activate", lambda i: game.window.screen_loader(23))

        game.menu.menuitemContents.connect("activate", self.help_content_clicked)
        game.menu.menuitemInformation.connect("activate", self.info_dialog_clicked)
        game.menu.menuitemAbout.connect("activate", self.aboutdialog_clicked)

        grid = Gtk.Grid()
        grid.set_border_width(1)
        grid.set_column_spacing(5)
        self.attach(grid, 0, 2, 1, 1)

        widgets.date = widgets.Date()
        grid.attach(widgets.date, 0, 0, 1, 1)

        widgets.news = widgets.News()
        widgets.news.connect("clicked", self.news_activated)
        grid.attach(widgets.news, 1, 0, 1, 1)

        label = Gtk.Label()  # Intentional blank label
        label.set_hexpand(True)
        grid.attach(label, 2, 0, 1, 1)

        widgets.nextmatch = widgets.NextMatch()
        grid.attach(widgets.nextmatch, 3, 0, 1, 1)

        widgets.continuegame = widgets.Button("_Continue Game")
        widgets.continuegame.connect("clicked", self.on_continue_game_clicked)
        grid.attach(widgets.continuegame, 4, 0, 1, 1)

    def run(self):
        self.show_all()

    def name_change(self, menuitem):
        club = game.clubs[game.teamid]
        previous = club.manager

        name_change = interface.NameChange()

        if name_change.display():
            game.news.set_manager_name(previous)

            game.window.screen_loader(game.active_screen_id)

    def news_activated(self, button):
        game.window.screen_loader(3)

        game.window.screenNews.select_oldest_item()

    def player_comparison(self, menuitem):
        if dialogs.comparison.comparison == [None, None]:
            dialogs.error(3)
        elif not dialogs.comparison.comparison[0] or not dialogs.comparison.comparison[1]:
            dialogs.error(5)
        else:
            dialogs.comparison.display()

    def view_opposition(self, menuitem):
        opposition_dialog = dialogs.Opposition()
        opposition_dialog.display()

    def new_game_clicked(self, menuitem):
        exit_dialog = interface.ExitDialog()

        if not exit_dialog.display(leave=True):
            game.window.remove(game.window.screenGame)
            game.window.add(game.window.screenMain)

            # Reset teamid to zero to prevent having to confirm quit
            game.teamid = None

    def load_game_clicked(self, menuitem):
        open_dialog = interface.OpenDialog()

        if open_dialog.display():
            game.window.screen_loader(game.active_screen_id)

    def save_game_clicked(self, menuitem):
        save_dialog = interface.SaveDialog()
        save_dialog.display()
        save_dialog.destroy()

    def delete_game_clicked(self, menuitem):
        delete_dialog = interface.DeleteDialog()
        delete_dialog.display()

    def print_clicked(self, menuitem):
        print_dialog = printing.PrintType()
        print_dialog.display()

    def preferences_dialog_clicked(self, menuitem):
        preferences_dialog = interface.PreferencesDialog()
        preferences_dialog.display()

        game.window.screen_loader(game.active_screen_id)

    def aboutdialog_clicked(self, menuitem):
        aboutdialog = interface.AboutDialog()
        aboutdialog.display()

    def help_content_clicked(self, menuitem):
        helpdialog = interface.HelpDialog()
        helpdialog.display()

    def info_dialog_clicked(self, menuitem):
        infodialog = interface.InfoDialog()
        infodialog.display()

    def on_continue_game_clicked(self, button):
        game.continuegame.continue_game()

        game.window.screen_loader(game.active_screen_id)


game.database = database.Database()
game.database = game.database.get_database_object()

game.continuegame = game.ContinueGame()
preferences.preferences = preferences.Preferences()
music.music = music.Player()

game.window = Window()
game.window.run()

dialogs.comparison = dialogs.Comparison()


if __name__ == "__main__":
    Gtk.main()
